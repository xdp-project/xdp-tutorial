# -*- fill-column: 76; -*-
#+TITLE: Tutorial: Tracing04 - tcpdump
#+OPTIONS: ^:nil

In this lesson we will show how to dump the packet samples
from XDP program all the way to the pcap dump file.


* Table of Contents                                                     :TOC:
- [[#dump-the-packet-sample][Dump the packet sample]]
- [[#assignments][Assignments]]
  - [[#assignment-1-setting-up-your-test-lab][Assignment 1: Setting up your test lab]]
  - [[#assignment-2-the-pcap-dump-file][Assignment 2: The PCAP dump file]]

* Dump the packet sample

In this example we will show how to send data and packet sample
into user space via perf event.

First you need to define the event map, which will allow you
to send events to the user space via perf event ring buffer:

#+begin_example sh
struct {
	__uint(type, BPF_MAP_TYPE_PERF_EVENT_ARRAY);
	__type(key, int);
	__type(value, struct S);
	__uint(max_entries, MAX_CPUS);
} my_map SEC(".maps");
#+end_example

The =value= determines the type of the event data we will
be posting to the user space through perf event ring buffer.
In our case it's =struct S=:

#+begin_example sh
struct S {
        __u16 cookie;
        __u16 pkt_len;
} __packed;
#+end_example

We set the values of the event (=metadata= variable) and pass them
into the =bpf_perf_event_output= call:

#+begin_example sh
int xdp_sample_prog(struct xdp_md *ctx)
{
        void *data_end = (void *)(long)ctx->data_end;
        void *data = (void *)(long)ctx->data;

	...

        __u64 flags = BPF_F_CURRENT_CPU;
        __u16 sample_size = (__u16)(data_end - data);
        struct S metadata;

        metadata.cookie = 0xdead;
        metadata.pkt_len = min(sample_size, SAMPLE_SIZE);

	ret = bpf_perf_event_output(ctx, &my_map, flags,
				    &metadata, sizeof(metadata));
	...
#+end_example

To add the actual packet dump to the event, we can
set =flags= upper 32 bits with the size of the requested sample
and the =bpf_perf_event_output= will attach the specified
amount of bytes from packet to the perf event:


#+begin_example sh
__u64 flags = BPF_F_CURRENT_CPU;

flags |= (__u64)sample_size << 32;

ret = bpf_perf_event_output(ctx, &my_map, flags,
                            &metadata, sizeof(metadata));
#+end_example

Please check the whole eBPF code in =xdp_sample_pkts_kern.c= file.

* Assignments

** Assignment 1: Setting up your test lab

In this lesson we will use the setup of the previous lesson:
Basic02 - loading a program by name [[https://github.com/xdp-project/xdp-tutorial/tree/master/basic02-prog-by-name#assignment-2-add-xdp_abort-program]]

#+begin_example sh
$ sudo ../testenv/testenv.sh setup --name veth-basic02
#+end_example

and make some packets:

#+begin_example sh
$ sudo ../testenv/testenv.sh enter --name veth-basic02
# ping  fc00:dead:cafe:1::1
PING fc00:dead:cafe:1::1(fc00:dead:cafe:1::1) 56 data bytes
#+end_example

** Assignment 2: The PCAP dump file

Build the =xdp_sample_pkts_user= dump program; to do so you might have to
install the =libpcap-dev= and the 32 bit libc dev packages.  Load the eBPF
kernel packets dump program and store the packets to the dump file:

#+begin_example sh
$ sudo ./xdp_sample_pkts_user -d veth-basic02 -F
pkt len: 118   bytes. hdr: 76 58 28 55 df 4e fa e2 b6 27 8e 79 86 dd 60 0d 48 1b 00 40 3a 40 fc 00 de ad ca fe 00 ...
pkt len: 118   bytes. hdr: 76 58 28 55 df 4e fa e2 b6 27 8e 79 86 dd 60 0d 48 1b 00 40 3a 40 fc 00 de ad ca fe 00 ...
^C
2 packet samples stored in samples.pcap
#+end_example

Check the pcap dump with the tcpdump application:
#+begin_example sh
$ tcpdump -r ./samples.pcap
reading from file ./samples.pcap, link-type EN10MB (Ethernet)
12:12:04.553039 IP6 fc00:dead:cafe:1::2 > krava: ICMP6, echo request, seq 2177, length 64
12:12:05.576864 IP6 fc00:dead:cafe:1::2 > krava: ICMP6, echo request, seq 2178, length 64
#+end_example
