# -*- fill-column: 76; -*-
#+TITLE: Setup dependencies
#+OPTIONS: ^:nil

Before you can start completing the steps in this XDP-tutorial, go though
this document and install the needed software packages.

* Table of Contents                                                     :TOC:
- [[#based-on-libbpf][Based on libbpf]]
  - [[#libbpf-as-git-submodule][libbpf as git-submodule]]
- [[#dependencies][Dependencies]]
  - [[#packages-on-fedora][Packages on Fedora]]
  - [[#packages-on-debianubuntu][Packages on Debian/Ubuntu]]
  - [[#packages-on-opensuse][Packages on openSUSE]]
- [[#kernel-headers-dependency][Kernel headers dependency]]
  - [[#packages-on-fedora-1][Packages on Fedora]]
  - [[#packages-on-debianubuntu-1][Packages on Debian/Ubuntu]]
  - [[#packages-on-opensuse-1][Packages on openSUSE]]
- [[#recommended-tools][Recommended tools]]
  - [[#packages-on-fedora-2][Packages on Fedora]]
  - [[#packages-on-ubuntu][Packages on Ubuntu]]
  - [[#packages-on-debian][Packages on Debian]]
  - [[#packages-on-opensuse-2][Packages on openSUSE]]

* Based on libbpf

This XDP-tutorial leverages [[https://github.com/libbpf/libbpf/][libbpf]] to ease development and loading of
BPF-programs. The library libbpf is part of the kernel tree under
[[https://github.com/torvalds/linux/blob/master/tools/lib/bpf/README.rst][tools/lib/bpf]], but Facebook engineers maintain a stand-alone build on
GitHub under https://github.com/libbpf/libbpf.

** libbpf as git-submodule

This repository uses [[https://github.com/libbpf/libbpf][libbpf]] as a git-submodule. After cloning this repository you need to run the command:

#+begin_example
git submodule update --init
#+end_example

If you want submodules to be part of the clone, you can use this command:

#+begin_example
git clone --recurse-submodules https://github.com/xdp-project/xdp-tutorial
#+end_example

If you need to add this to your own project, you can use the command:

#+begin_example
git submodule add https://github.com/libbpf/libbpf/ libbpf
#+end_example

* Dependencies

The main dependencies are =libbpf=, =llvm=, =clang= and =libelf=. LLVM+clang
compiles our restricted-C programs into BPF-byte-code, which is stored in an
ELF object file (=libelf=), that is loaded by =libbpf= into the kernel via
the =bpf= syscall. Some of the lessons also use the =perf= utility to
track the kernel behaviour through tracepoints.

The Makefiles in this repo will try to detect if you are missing some
dependencies, and give you some pointers.

** Packages on Fedora

On a machine running the Fedora Linux distribution, install the packages:

#+begin_example
 $ sudo dnf install clang llvm
 $ sudo dnf install elfutils-libelf-devel libpcap-devel perf
#+end_example

Note also that Fedora by default sets a limit on the amount of locked memory
the kernel will allow, which can interfere with loading BPF maps. The
=testenv.sh= script will adjust this for you, but if you're not using that
you will probably run into problems. Use this command to raise the limit:

#+begin_example
  # ulimit -l 1024
#+end_example

Note that you need to do this in the shell you are using to load programs
(in particular, it won't work with =sudo=).

** Packages on Debian/Ubuntu

On Debian and Ubuntu installations, install the dependencies like this:

#+begin_example
 $ sudo apt install clang llvm libelf-dev libpcap-dev gcc-multilib build-essential
#+end_example

To install the 'perf' utility, run this on Debian:
#+begin_example
 $ sudo apt install linux-perf
#+end_example

or this on Ubuntu:

#+begin_example
 $ sudo apt install linux-tools-$(uname -r)
#+end_example

** Packages on openSUSE

On a machine running the openSUSE distribution, install the packages:

#+begin_example
 $ sudo zypper install clang llvm libelf-devel libpcap-devel perf
#+end_example

* Kernel headers dependency

The Linux kernel provides a number of header files, which are usually installed
in =/usr/include/linux=. The different Linux distributions usually provide a
software package with these headers.

Some of the header files (we depend on) are located in the kernel tree under
include/uapi/linux/ (e.g. include/uapi/linux/bpf.h), but you should not include
those files as they go through a conversion process when exported/installed into
distros' =/usr/include/linux= directory. In the kernel git tree you can run the
command: =make headers_install= which will create a lot of headers files in
directory "usr/".

For now, this tutorial depends on kernel headers package provided by your
distro. We may choose to shadow some of these later.

** Packages on Fedora

On a machine running the Fedora Linux distribution, install the package:
#+begin_example
 $ sudo dnf install kernel-headers
#+end_example

** Packages on Debian/Ubuntu

On Debian and Ubuntu installations, install the headers like this

#+begin_example
 $ sudo apt install linux-headers-$(uname -r)
#+end_example

** Packages on openSUSE

On a machine running the openSUSE distribution, install the package:

#+begin_example
 $ sudo zypper install kernel-devel
#+end_example


* Recommended tools

The =bpftool= is the recommended tool for inspecting BPF programs running on
your system. It also offers simple manipulation of eBPF programs and maps.
The =bpftool= is part of the Linux kernel tree under [[https://github.com/torvalds/linux/tree/master/tools/bpf/bpftool][tools/bpf/bpftool/]], but
some Linux distributions also ship the tool as a software package.

** Packages on Fedora

On a machine running the Fedora Linux distribution, install package:

#+begin_example
 $ sudo dnf install bpftool
#+end_example

** Packages on Ubuntu

Starting from Ubuntu 19.10, bpftool can be installed with:

#+begin_example
 $ sudo apt install linux-tools-common linux-tools-generic
#+end_example

(Ubuntu 18.04 LTS also has it, but it is an old and quite limited bpftool
version.)

** Packages on Debian

bpftool is officially packaged for Debian. If you are on Buster, you will need to get it from [[https://backports.debian.org/Instructions/][buster-backports]].

** Packages on openSUSE

On a machine running the openSUSE Tumbleweed distribution, install package:

#+begin_example
 $ sudo zypper install bpftool
#+end_example
